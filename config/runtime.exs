import Config

# This file is generated by dockerize. It is used for holding sensitive
# runtime configurations.  For more information about runtime configuration
# for mix release, please check the documentation:
# - https://hexdocs.pm/mix/Mix.Tasks.Release.html#module-runtime-configuration
#
# Example:
#
#    config :my_app, MyApp.Repo,
#      adapter: Ecto.Adapters.Postgres,
#      username: System.fetch_env!("DB_USERNAME"),
#      password: System.fetch_env!("DB_PASSWORD"),
#      hostname: System.fetch_env!("DB_HOSTNAME"),
#      port: System.fetch_env!("DB_PORT"),
#      database: System.fetch_env!("DB_DATABASE"),
#      pool_size: 20

# config :formular_server, :secret_key, System.fetch_env!("MY_APP_SECRET_KEY")
# Configure your database
unless config_env() == :test do
  pool_size = fn ->
    System.get_env("FORMULAR_DB_POOL_SIZE", "10")
    |> String.to_integer()
  end

  allowed_origins = fn ->
    setting = System.get_env("ALLOWED_ORIGIN", "") |> String.split(",", trim: true)

    case setting do
      [] -> false
      [_ | _] = origins -> origins
    end
  end

  config :formular_server, Formular.Server.Repo,
    url: System.fetch_env!("FORMULAR_DB_URL"),
    pool_size: pool_size.()

  web_port = System.get_env("PORT", "4000") |> String.to_integer()

  config :formular_server, Formular.ServerWeb.Endpoint,
    secret_key_base: System.fetch_env!("SECRET_KEY_BASE"),
    http: [ip: {0, 0, 0, 0}, port: web_port],
    check_origin: allowed_origins.()

  config :appsignal, :config, env: System.get_env("APPSIGNAL_APP_ENV", "dev")

  config :ueberauth, Ueberauth.Strategy.Github.OAuth,
    client_id: System.get_env("GITHUB_CLIENT_ID"),
    client_secret: System.get_env("GITHUB_CLIENT_SECRET")

  config :ueberauth, Ueberauth.Strategy.Google.OAuth,
    client_id: System.get_env("GOOGLE_CLIENT_ID"),
    client_secret: System.get_env("GOOGLE_CLIENT_SECRET")

  config :formular_server,
         :allowed_google_websites,
         System.get_env("GOOGLE_ALLOWED_DOMAINS", "") |> String.split(",", trim: true)
end
